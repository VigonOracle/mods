//
// Othermill milling machine
//
// Neil Gershenfeld
// (c) Massachusetts Institute of Technology 2016
// Modified by Francisco Sanchez Arroyo 04-Feb-2020
//
// This work may be reproduced, modified, distributed, performed, and
// displayed for any purpose, but must acknowledge the mods
// project. Copyright is retained and must be preserved. The work is
// provided as is; no warranty is provided, and users accept all
// liability.
//
// closure
//

(function(){
//
// module globals
//
var mod = {}
//
// name
//
var name = 'Othermill milling machine'
//
// initialization
//
var init = function() {
   mod.units = 40.0
   mod.speed.value = 4
   mod.plunge.value = 2 //added by Fran
   mod.spindle_speed.value = 16000 //added by Fran
   mod.tool.value = 1 // added by Fran
   mod.ox.value = 10
   mod.oy.value = 10
   mod.oz.value = 0
   mod.jz.value = 2
   mod.hx.value = 0
   mod.hy.value = 152.4
   mod.hz.value = 60.5
   }
//
// inputs
//
var inputs = {
   toolpath:{type:'object',
      event:function(evt){
         mod.name = evt.detail.name
         mod.path = evt.detail.path
         mod.dpi = evt.detail.dpi
         mod.width = evt.detail.width
         mod.height = evt.detail.height
         make_path()
         }}}
//
// outputs
//
var outputs = {
   file:{type:'object',
      event:function(obj){
         mods.output(mod,'file',obj)
         }}}
//
// interface
//

var interface = function(div){
   mod.div = div
   //
   // speed
   //
   div.appendChild(document.createTextNode('cut speed: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      div.appendChild(input)
      mod.speed = input
   div.appendChild(document.createTextNode(' (mm/s)'))
   div.appendChild(document.createElement('br'))
   //
   // plunge speed
   //
   div.appendChild(document.createTextNode('plunge speed: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      div.appendChild(input)
      mod.plunge = input
   div.appendChild(document.createTextNode(' (mm/s)'))
   div.appendChild(document.createElement('br'))
   //
   // jog speed
   //
   div.appendChild(document.createTextNode('jog speed: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      div.appendChild(input)
      //mod.plunge = input
   div.appendChild(document.createTextNode(' (mm/s)'))
   div.appendChild(document.createElement('br'))
   //
   // jog
   //
   div.appendChild(document.createTextNode('jog height:'))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      div.appendChild(input)
      mod.jz = input
   div.appendChild(document.createTextNode(' (mm)'))
   div.appendChild(document.createElement('br'))
   //
   // spindle speed
   //
   div.appendChild(document.createTextNode('spindle speed: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      div.appendChild(input)
      mod.spindle_speed = input
   div.appendChild(document.createTextNode(' (rpm)'))
   div.appendChild(document.createElement('br'))
   //
   // tool
   //
   div.appendChild(document.createTextNode('tool number: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      div.appendChild(input)
      mod.tool = input
   div.appendChild(document.createElement('br'))
   //
   // origin x (mm)
   //
   div.appendChild(document.createTextNode('origin:'))
   div.appendChild(document.createElement('br'))
   div.appendChild(document.createTextNode('x: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      div.appendChild(input)
      mod.ox = input
   div.appendChild(document.createTextNode(' (mm)'))
   div.appendChild(document.createElement('br'))
   div.appendChild(document.createTextNode(' y: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      div.appendChild(input)
      mod.oy = input
   div.appendChild(document.createTextNode(' (mm)'))
   div.appendChild(document.createElement('br'))
   //div.appendChild(document.createTextNode('z: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      //div.appendChild(input)
      mod.oz = input
   //div.appendChild(document.createTextNode(' (mm)'))
   //div.appendChild(document.createElement('br'))
   var btn = document.createElement('button')
      btn.style.padding = mods.ui.padding
      btn.style.margin = 1
      var span = document.createElement('span')
         var text = document.createTextNode('move to origin')
            span.appendChild(text)
         btn.appendChild(span)
      btn.addEventListener('click',function(){
         var x0 = mod.units*parseFloat(mod.ox.value);
         var y0 = mod.units*parseFloat(mod.oy.value);
         var z0 = mod.units*parseFloat(mod.oz.value);
         var zjog = mod.units*parseFloat(mod.jz.value);
         var str = "PA;PA;VS10;!VZ10;!PZ0,"+zjog+";PU"+x0+","+y0+";Z"+x0+","+y0+","+z0+";!MC0;"
         var obj = {}
         obj.type = 'command'
         obj.name = mod.name+'.nc'
         obj.contents = str
         outputs.file.event(obj)
         })
      div.appendChild(btn)
   div.appendChild(document.createElement('br'))

   //
   // home
   //
   div.appendChild(document.createTextNode('home:'))
   div.appendChild(document.createElement('br'))
   div.appendChild(document.createTextNode('x: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      div.appendChild(input)
      mod.hx = input
   div.appendChild(document.createTextNode(' (mm)'))
   div.appendChild(document.createElement('br'))
   div.appendChild(document.createTextNode(' y: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      div.appendChild(input)
      mod.hy = input
   div.appendChild(document.createTextNode(' (mm)'))
   div.appendChild(document.createElement('br'))
   div.appendChild(document.createTextNode('z: '))
   var input = document.createElement('input')
      input.type = 'text'
      input.size = 6
      div.appendChild(input)
      mod.hz = input
   div.appendChild(document.createTextNode(' (mm)'))
   div.appendChild(document.createElement('br'))
   var btn = document.createElement('button')
      btn.style.padding = mods.ui.padding
      btn.style.margin = 1
      var span = document.createElement('span')
         var text = document.createTextNode('move home and stop')
            span.appendChild(text)
         btn.appendChild(span)
      btn.addEventListener('click',function(){
         var xhome = mod.units*parseFloat(mod.hx.value);
         var yhome = mod.units*parseFloat(mod.hy.value);
         var zhome = mod.units*parseFloat(mod.hz.value);
         var str = "PA;PA;!PZ0,"+zhome+";PU"+xhome+","+yhome+";!MC0;";
         var obj = {}
         obj.type = 'command'
         obj.name = mod.name+'.nc'
         obj.contents = str
         outputs.file.event(obj)
         })
      div.appendChild(btn)
   div.appendChild(document.createElement('br'))



   //
   // manual move buttons
   //
   div.appendChild(document.createTextNode('manual move:'))
   div.appendChild(document.createElement('br'))

   var input = document.createElement('input')
      input.type = 'radio'
      input.name = mod.div.id+'range'
      input.id = mod.div.id+'range_big'
      div.appendChild(input)
      mod.range_big = input
   div.appendChild(document.createTextNode('5mm'))
   var input = document.createElement('input')
      input.type = 'radio'
      input.name = mod.div.id+'range'
      input.id = mod.div.id+'range_medium'
      div.appendChild(input)
      mod.range_medium = input
      mod.range_medium.checked = true
   div.appendChild(document.createTextNode('1mm'))
   var input = document.createElement('input')
      input.type = 'radio'
      input.name = mod.div.id+'range'
      input.id = mod.div.id+'range_small'
      div.appendChild(input)
      mod.range_small = input
   div.appendChild(document.createTextNode('0.1mm'))
   div.appendChild(document.createElement('br'))   

   

div.appendChild(document.createTextNode('\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'))

   var btn = document.createElement('button')
      btn.style.margin = 1
      btn.appendChild(document.createTextNode('+Y'))
      btn.addEventListener('click',function() {
         //
         // Check step
         //
         check_step()
         //
         // Create message
         //
         var str = "PA;PA;VS10;PR0,"+mod.step+";!MC0;"
         //
         // send command
         //
         var obj = {}
         obj.type = 'command'
         obj.name = mod.name+'.nc'
         obj.contents = str
         mods.output(mod,'file',obj)
         })
      div.appendChild(btn)

div.appendChild(document.createTextNode('\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'))

   var btn = document.createElement('button')
      btn.style.margin = 1
      btn.appendChild(document.createTextNode('+Z'))
      btn.addEventListener('click',function() {
         //
         // Check step
         //
         check_step()
         //
         // Create message
         //
         var str = "PA;PA;!VZ5;PR;!ZM"+mod.step+";!MC0;"
         //
         // send command
         //
         var obj = {}
         obj.type = 'command'
         obj.name = mod.name+'.nc'
         obj.contents = str
         mods.output(mod,'file',obj)
         })
      div.appendChild(btn)

   div.appendChild(document.createElement('br'))   



   var btn = document.createElement('button')
      btn.style.margin = 1
      btn.appendChild(document.createTextNode('-X'))
      btn.addEventListener('click',function() {
         //
         // Check step
         //
         check_step()
         //
         // Create message
         //
         var str = "PA;PA;VS10;PR-"+mod.step+",0;!MC0;"
         //
         // send command
         //
         var obj = {}
         obj.type = 'command'
         obj.name = mod.name+'.nc'
         obj.contents = str
         mods.output(mod,'file',obj)
         })
      div.appendChild(btn)

   var btn = document.createElement('button')
      btn.style.margin = 1
      btn.appendChild(document.createTextNode('XY0'))
      btn.addEventListener('click',function() {
         //
         // Check step
         //
         check_step()
         //
         // Create message
         //
         var str = "PA;PA;VS10;PR0,"+mod.step+";!MC0;"
         //
         // send command
         //
         var obj = {}
         obj.type = 'command'
         obj.name = mod.name+'.nc'
         obj.contents = str
         mods.output(mod,'file',obj)
         })
      div.appendChild(btn)

   var btn = document.createElement('button')
      btn.style.margin = 1
      btn.appendChild(document.createTextNode('+X'))
      btn.addEventListener('click',function() {
         //
         // Check step
         //
         check_step()
         //
         // Create message
         //
         var str = "PA;PA;VS10;PR"+mod.step+",0;!MC0;"
         //
         // send command
         //
         var obj = {}
         obj.type = 'command'
         obj.name = mod.name+'.nc'
         obj.contents = str
         mods.output(mod,'file',obj)
         })
      div.appendChild(btn)

div.appendChild(document.createTextNode('\u00a0\u00a0'))

   var btn = document.createElement('button')
      btn.style.margin = 1
      btn.appendChild(document.createTextNode('Z0'))
      btn.addEventListener('click',function() {
         //
         // Create message
         //
         var str = "PR;!PZ0;!MC0;"
         //
         // send command
         //
         var obj = {}
         obj.type = 'command'
         obj.name = mod.name+'.nc'
         obj.contents = str
         mods.output(mod,'file',obj)
         })
      div.appendChild(btn)

   div.appendChild(document.createElement('br'))   

div.appendChild(document.createTextNode('\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'))


   var btn = document.createElement('button')
      btn.style.margin = 1
      btn.appendChild(document.createTextNode('-Y'))
      btn.addEventListener('click',function() {
         //
         // Check step
         //
         check_step()
         //
         // Create message
         //
         var str = "PA;PA;VS10;PR0,-"+mod.step+";!MC0;"
         //
         // send command
         //
         var obj = {}
         obj.type = 'command'
         obj.name = mod.name+'.nc'
         obj.contents = str
         mods.output(mod,'file',obj)
         })
      div.appendChild(btn)

div.appendChild(document.createTextNode('\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'))

   var btn = document.createElement('button')
      btn.style.margin = 1
      btn.appendChild(document.createTextNode('- Z'))
      btn.addEventListener('click',function() {
         //
         // Check step
         //
         check_step()
         //
         // Create message
         //
         var str = "PA;PA;!VZ5;PR;!ZM-"+mod.step+";!MC0;"
         //
         // send command
         //
         var obj = {}
         obj.type = 'command'
         obj.name = mod.name+'.nc'
         obj.contents = str
         mods.output(mod,'file',obj)
         })
      div.appendChild(btn)



   }
//
// local functions
//

function check_step() {
   //
   // Checks how big is the manual move step 
   // Units are mm x 40 eg. 10mm is 400 units
   //
   if (mod.range_big.checked) {
         mod.step = 200
         console.log('ten checked')
   }
   else if (mod.range_medium.checked) {
         mod.step = 40}
   else if (mod.range_small.checked) {
         mod.step = 4}
}




function make_path() {

      //globals.type = ".nc" //to delete
      var dx = mod.width / mod.dpi
      var nx = mod.width
      var cut_speed = 60 * parseFloat(mod.speed.value) / 25.4 // check units input should be mm/s and output is inch/min
      var plunge_speed = 60 * parseFloat(mod.plunge.value) / 25.4 // check units input should be mm/s
      var jog_height = parseFloat(mod.jz.value) / 25.4 // input in mm
      var spindle_speed = parseFloat(mod.spindle_speed.value)
      var tool = mod.tool.value
      var scale = dx / (nx - 1)
      var x0 = parseFloat(mod.ox.value) / 25.4
      var y0 = parseFloat(mod.oy.value) / 25.4
      var z0 = parseFloat(mod.oz.value) / 25.4
      var xoffset = x0
      var yoffset = y0
      var zoffset = z0
      str = "%\n" // tape start
      // Clear all state: XY plane, inch mode, cancel diameter compensation, cancel length offset
      // coordinate system 1, cancel motion, non-incremental motion, feed/minute mode
      str += "G17\n"
      str += "G20\n"
      str += "G40\n"
      str += "G49\n"
      // Othermill assumes G55 coordinate system
      str += "G55\n"
      str += "G80\n"
      str += "G90\n"
      str += "G94\n"
      str += "T" + tool + "M06\n" // tool selection, tool change
      str += "F" + cut_speed.toFixed(4) + "\n" // feed rate
      str += "S" + spindle_speed + "\n" // spindle speed
      //if (findEl("mod_coolant_on").checked)  // not defined yet
      //   str += "M08\n" // coolant on
      str += "G00Z" + jog_height.toFixed(4) + "\n" // move up before starting spindle
      str += "M03\n" // spindle on clockwise
      str += "G04 P1\n" // give spindle 1 second to spin up
      //
      // follow segments
      //
      for (var seg = 0; seg < mod.path.length; ++seg) {
         var x = xoffset + scale * mod.path[seg][0][0]
         var y = yoffset + scale * mod.path[seg][0][1]
         var z = zoffset + scale * mod.path[seg][0][2]
         //
         // move up to starting point
         //
         str += "Z" + jog_height.toFixed(4) + "\n"
         str += "G00X" + x.toFixed(4) + "Y" + y.toFixed(4) + "Z" + jog_height.toFixed(4) + "\n"
         //
         // move down
         //
         str += "G01Z" + z.toFixed(4) + " F" + plunge_speed.toFixed(4) + "\n"
         str += "F" + cut_speed.toFixed(4) + "\n" //restore XY feed rate
         for (var pt = 1; pt < mod.path[seg].length; ++pt) {
            //
            // move to next point
            //
            x = xoffset + scale * mod.path[seg][pt][0]
            y = yoffset + scale * mod.path[seg][pt][1]
            z = zoffset + scale * mod.path[seg][pt][2]
            str += "G01X" + x.toFixed(4) + "Y" + y.toFixed(4) + "Z" + z.toFixed(4) + "\n"
         }
      }
      //
      // finish
      //
      str += "G00Z" + jog_height.toFixed(4) + "\n" // move up before stopping spindle
      str += "M05\n" // spindle stop
      //if (findEl("mod_coolant_on").checked)  // undefined
      //   str += "M09\n" // coolant off
      str += "M30\n" // program end and reset
      str += "%\n" // tape end




   //
   // output string
   //
   var obj = {}
   obj.type = 'file'
   obj.name = mod.name+'.nc'
   obj.contents = str
   outputs.file.event(obj)


/*

   var dx = 25.4*mod.width/mod.dpi
   var nx = mod.width
   var speed = parseFloat(mod.speed.value)
   var jog = parseFloat(mod.jz.value)
   var ijog = Math.floor(mod.units*jog)
   var scale = mod.units*dx/(nx-1)
   var x0 = parseFloat(mod.ox.value)
   var y0 = parseFloat(mod.oy.value)
   var z0 = parseFloat(mod.oz.value)
   var xoffset = mod.units*x0
   var yoffset = mod.units*y0
   var zoffset = mod.units*z0
   var str = "PA;PA;" // plot absolute
   str += "VS"+speed+";!VZ"+speed+";"
   str += "!PZ"+0+","+ijog+";" // set jog
   str += "!MC1;\n" // turn motor on
   //
   // follow segments
   //
   for (var seg = 0; seg < mod.path.length; ++seg) {
      //
      // move up to starting point
      //
      x = xoffset+scale*mod.path[seg][0][0]
      y = yoffset+scale*mod.path[seg][0][1]
      str += "PU"+x.toFixed(0)+","+y.toFixed(0)+";\n"
      //
      // move down
      //
      z = zoffset+scale*mod.path[seg][0][2]
      str += "Z"+x.toFixed(0)+","+y.toFixed(0)+","+z.toFixed(0)+";\n"
      for (var pt = 1; pt < mod.path[seg].length; ++pt) {
         //
         // move to next point
         //
         x = xoffset+scale*mod.path[seg][pt][0]
         y = yoffset+scale*mod.path[seg][pt][1]
         z = zoffset+scale*mod.path[seg][pt][2]
         str += "Z"+x.toFixed(0)+","+y.toFixed(0)+","+z.toFixed(0)+";\n"
         }
      //
      // move up
      //
      str += "PU"+x.toFixed(0)+","+y.toFixed(0)+";\n"
      }
   //
   // turn off motor and move back
   //
   var xhome = mod.units*parseFloat(mod.hx.value)
   var yhome = mod.units*parseFloat(mod.hy.value)
   var zhome = mod.units*parseFloat(mod.hz.value)
   str += "PA;PA;!PZ0,"+zhome+";PU"+xhome+","+yhome+";!MC0;"





   //
   // output string
   //
   var obj = {}
   obj.type = 'file'
   obj.name = mod.name+'.nc'
   obj.contents = str
   outputs.file.event(obj)

*/

   }
//
// return values
//
return ({
   name:name,
   init:init,
   inputs:inputs,
   outputs:outputs,
   interface:interface
   })
}())
